load("C:/Users/571986/Desktop/BAH/Genomic Sequence Manager/Visualization/GSM-App-8/.RData")
shiny::runApp('C:/Users/571986/Desktop/BAH/Genomic Sequence Manager/Visualization/GSM-App-8')
library(XML)
xml.url <- "ftp://ftp.fbo.gov/datagov/FBOFullXML.xml"
xmlfile <- xmlEventParse(xml.url)
install.packages(rjson)
?fromJSON
??fromJSON
help("install.packages")
install.packages(rjson)
install.packages(jsonlite)
help("install")
install.packages("rjson")
library("rjson")
json_file <- http://ec2-54-81-147-113.compute-1.amazonaws.com:8080/user-info?user_id=10
json_file <- "http://ec2-54-81-147-113.compute-1.amazonaws.com:8080/user-info?user_id=10"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
json_data <- fromJSON(json_file, method="C", unexpected.escape = "error")
json_data <- fromJSON(json_file, method="C")
json_data <- fromJSON(json_file, method="C", unexpected.escape = "skip")
library(caret)
install.packages(c("caret", "kernlab"))
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
View(inTrain)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
View(testing)
dim(training)
set.seed(32343)
modelFit <- train(type ~., data=training, method="glm")
modelFit <- train(type ~.,data=training, method="glm")
modelFit
modelFit <- train(type~.,data=training, method="glm")
modelFit$finalModel
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type~.,data=training, method="glm")
modelFit$finalModel
folds <- createFolds(y=spam$type k=10, list=TRUE, returnTrain=TRUE)
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain=TRUE)
sappl(folds, length)
sapply(folds, length)
folds[1]
folds[2]
args(trainControl)
set.seed(32343) #this ensures the same ransom numbers get generated each time you run the procedure
#so we can set an over seed or a seed for resampling
modelFit <- train(type~.,data=training, method="glm")
modelFit$finalModel
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343) #this ensures the same ransom numbers get generated each time you run the procedure
#so we can set an over seed or a seed for resampling
modelFit <- train(type~.,data=training, method="glm")
modelFit$finalModel
shiny::runApp('GitHub/womenindatascience')
shiny::runApp('GitHub/womenindatascience')
shiny::runApp('GitHub/womenindatascience')
shiny::runApp('GitHub/womenindatascience')
